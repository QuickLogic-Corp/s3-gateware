library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

------------------------------------------------------------------------
-- File : f512x8_512x8.tb
-- Design Date: April 11, 2005
-- Creation Date : Wed May 13 16:02:49 2020

-- Created By SpDE Version : SpDE 2016.2 Release
-- Author: QuickLogic Corporation,
-- Copyright (C) 1998, Customers of QuickLogic may copy and modify this
-- file for use in designing QuickLogic devices only.
-- Description: This is a sample test bench for your FIFO.
-- data is loaded in then read back
-- The intended use of this file is to help users verify that the
-- FIFO that is generated by SpDE is functionally correct.
------------------------------------------------------------------------

entity t is
end t;

architecture behave of t is

component f512x8_512x8
   port (DIN : in std_logic_vector(7 downto 0);
         Fifo_Push_Flush,Fifo_Pop_Flush,Clk : in std_logic;
         PUSH,POP : in std_logic;
         Clk_En,Fifo_Dir,Async_Flush : in std_logic;
         DOUT  : out std_logic_vector (7 downto 0);
         Almost_Empty,Almost_Full : out std_logic;
         PUSH_FLAG,POP_FLAG : out std_logic_vector(3 downto 0));
end component;

signal Almost_Empty: std_logic;
signal Almost_Full: std_logic;
signal POP  : std_logic;
signal PUSH : std_logic;
signal Clk  : std_logic;
signal DIN  : std_logic_vector (7 downto 0);
signal Clk_En,Fifo_Dir,Async_Flush  : std_logic;
signal DOUT : std_logic_vector (7 downto 0);
signal Fifo_Push_Flush,Fifo_Pop_Flush: std_logic;
signal PUSH_FLAG,POP_FLAG :  std_logic_vector(3 downto 0);

signal i    : std_logic_vector (7 downto 0);
constant period: time := 100 ns;

begin 
-- fifo is loaded with data and then, as it is unloaded, a
-- check is performed to see if the same data is read back.

   m : f512x8_512x8
      port map( DIN => DIN,
                Fifo_Push_Flush  => Fifo_Push_Flush,
                Fifo_Pop_Flush  => Fifo_Pop_Flush,
                PUSH => PUSH,
                POP => POP,
                Clk => Clk,
                Clk_En => Clk_En,
                Fifo_Dir => Fifo_Dir,
                Async_Flush => Async_Flush,
                PUSH_FLAG => PUSH_FLAG,
                POP_FLAG => POP_FLAG,
                Almost_Full => Almost_Full,
                Almost_Empty => Almost_Empty,
                DOUT => DOUT);

   ClockGenerator: process
   begin
      while TRUE loop
         Clk <= '0';
         wait for period/2;
         Clk <= '1';
         wait for period/2;
      end loop;
   end process ClockGenerator;

   Stimulus: process
   begin
      i <= "00000000";
      while TRUE loop
         wait for period;
         DIN <= i;
         i <= i + 1;
      end loop;
   end process Stimulus;

   loadAndUnLoad : process
   begin
      PUSH <= '1';
      Fifo_Push_Flush  <= '0';
      Fifo_Pop_Flush  <= '0';
      POP <= '0';
		Clk_En<='1';
		Fifo_Dir<='0';
		Async_Flush<='0';

      wait for period * 513;  -- fill up fifo

      PUSH <= '0';
      POP <= '1';
      Fifo_Push_Flush <= '0';
      Fifo_Pop_Flush <= '0';

      wait for period * 516;  -- unload up fifo
      POP <= '0';
      wait ;
   end process loadAndUnLoad;
end behave;

configuration behave_t of t is
for behave
end for;
end behave_t;
